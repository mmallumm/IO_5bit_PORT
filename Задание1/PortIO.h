/*!
	\mainpage Интерфейс для работы с 5-битным дискретным портом ввода-вывода микроконтроллера
	Данный интерфейс прдествляет из себя класс PortIO, объявленный и реализованный в файлах McTest/PortIO.h и McTest/PortIO.cpp .

	\author Лазарев Максим Романович
	\version 1.0
	\date 14.09.2021
	
*/
/*!
	\brief Класс для работы с 5-битным дискретным портом ввода-вывода микроконтроллера 

	Класс PortIO содержит:
	10 методов;
	5 констант (5 битовых флагов);
	2 поля для работы с регистрами микроконтроллера (PORT - регистр питания линий порта, DDR - регистр направлений линий порта).
*/
class PortIO {
public:
	const unsigned char PIN0 = 0b00001;						///< Битовый флаг для работы с 1-ым битом
	const unsigned char PIN1 = 0b00010;						///< Битовый флаг для работы с 2-ым битом
	const unsigned char PIN2 = 0b00100;						///< Битовый флаг для работы с 3-ым битом
	const unsigned char PIN3 = 0b01000;						///< Битовый флаг для работы с 4-ым битом
	const unsigned char PIN4 = 0b10000;						///< Битовый флаг для работы с 5-ым битом


	PortIO(unsigned char *port, unsigned char *ddr);		///< \brief Конструктор класса
															///< \details Конструктор принимает два аргумента-указателя "*port" и "*ddr", присваивает их значения указателям PORT и DDR соответственно.
															///< \details Конструктор присваивает регистрам PORT и DDR значение по умолчанию (0b00000).

	void SET_DDR_DEFAULT();									///< \brief Метод присваивания регистру DDR значения по умолчанию (0b00000)
															///< \details Метод не имеет входных параметров. 

	void SET_PIN_INPUT(const unsigned char option);			///< \brief Метод присваивания направления "Вход" (0) для линии порта 
															///< \details Для корректной работы входной параметр "option" должен представлять из себя 5 битовый флаг PINx, где x - индекс нужной линии (от 0 до 4).

	void SET_PIN_OUTPUT(const unsigned char option);		///< \brief Метод присваивания направления "Выход" (1) для линии порта 
															///< \details Для корректной работы входной параметр "option" должен представлять из себя 5 битовый флаг PINx, где x - индекс нужной линии (от 0 до 4).

	void SET_PORT_DEFAULT();								///< \brief Метод присваивания регистру PORT значения по умолчанию (0b00000)
															///< \details Метод не имеет входных параметров.

	void SET_POWER_ON(const unsigned char option);			///< \brief Метод присваивания значения 1 (питание есть) для линии порта 
															///< \details Для корректной работы входной параметр "option" должен представлять из себя 5 битовый флаг PINx, где x - индекс нужной линии (от 0 до 4).

	void SET_POWER_OFF(const unsigned char option);			///< \brief Метод присваивания значения 0 (питания нет) для линии порта 
															///< \details Для корректной работы входной параметр "option" должен представлять из себя 5 битовый флаг PINx, где x - индекс нужной линии (от 0 до 4).
	
	bool READ_PIN_DIRECTION(const unsigned char option);	///< \brief Метод чтения направления линии порта 
															///< \details Для корректной работы входной параметр "option" должен представлять из себя 5 битовый флаг PINx, где x - индекс нужной линии (от 0 до 4).
															///< \details Метод возвращает 1 в случае установленного направления линии "Выход", возвращает 0 в случае установленного направления линии "Вход".

	bool READ_PIN_POWER(const unsigned char option);		///< \brief Метод чтения линии порта 
															///< \details Для корректной работы входной параметр "option" должен представлять из себя 5 битовый флаг PINx, где x - индекс нужной линии (от 0 до 4).
															///< \details Метод возвращает 1 в случае включенного питания линии, возвращает 0 в случае отключенного питания линии.

	void GIVE_DDR();										///< \brief Метод вывода в консоль текущего значения регистра DDR
															///< \details Метод не имеет входных параметров. 

	void GIVE_PORT();										///< \brief Метод вывода в консоль текущего значения регистра PORT
															///< \details Метод не имеет входных параметров. 

 private:
	unsigned char *DDR;										///< Объявление указателя регистра направлений линий порта

	unsigned char *PORT;									///< Объявление указателя регистра питания линий порта
	
};


